name: CI/CD deploy to vps server

on:
  schedule:
    - cron: '59 11 * * *'
  push:
    branches:
      - main

permissions:
  packages: write

jobs:
  commit-hash:
    runs-on: ubuntu-latest
    outputs:
      commit_hash: ${{ steps.get_commit.outputs.commit_hash }}
    steps:
      - uses: actions/checkout@v4
      - name: Get commit hash
        id: get_commit
        run: echo "::set-output name=commit_hash::$(git rev-parse HEAD)"

    
  build-and-push-frontend-image:
    needs:
      - commit-hash
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set short git commit SHA
        id: vars
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry $https://ghcr.io
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: ./frontend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ghcr.io/vchen7629/atlaxiom-frontend:${{ needs.commit-hash.outputs.commit_hash}}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-and-push-backend-image:
    needs:
      - commit-hash
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set short git commit SHA
        id: vars
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV

      - name: Create backend env file
        run: |
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" > ./loginapi/.env
          echo "DATABASE_URI=${{ secrets.DATABASE_URI }}" >> ./loginapi/.env
          echo "ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}" >> ./loginapi/.env
          echo "REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}" >> ./loginapi/.env
          cat ./loginapi/.env
      - name: Verify .env file creation
        run: ls -al ./loginapi
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry https://ghcr.io
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./loginapi
          push: true
          tags: ghcr.io/vchen7629/atlaxiom-backend:${{ needs.commit-hash.outputs.commit_hash }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build-and-push-frontend-image
      - build-and-push-backend-image
      - commit-hash
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: create env file
        run: |
          echo "GIT_COMMIT_HASH=${{ github.sha }}" >> env
      - name: Check contents of env file
        run: |
          cat ./env
      - name: Check current working directory
        run: |
          pwd
          ls -l     
      - name: 'Docker Stack Deploy '
        uses: cssnr/stack-deploy-action@v1
        with:
          name: 'Atlaxiom'
          file: './compose.yaml'
          host: ${{ secrets.VPS_IP_ADDRESS }}
          user: vchen7629
          ssh_key: ${{ secrets.DEPLOY_SSH_KEY }}
          env_file: './env'
          args: '--debug'
                               

